// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module ltpi_csr_light (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [7:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input ltpi_csr_light_pkg::ltpi_csr_light__in_t hwif_in,
        output ltpi_csr_light_pkg::ltpi_csr_light__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [7:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read latency > write latency. May need to delay next write that follows a read
    logic [0:0] cpuif_req_stall_sr;
    always_ff @(posedge clk) begin
        if(rst) begin
            cpuif_req_stall_sr <= '0;
        end else if(cpuif_req && !cpuif_req_is_wr) begin
            cpuif_req_stall_sr <= '1;
        end else begin
            cpuif_req_stall_sr <= (cpuif_req_stall_sr >> 'd1);
        end
    end
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = cpuif_req_stall_sr[0];
    assign cpuif_req_masked = cpuif_req & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic LTPI_Link_Status;
        logic LTPI_Detect_Capabilities_Local;
        logic LTPI_Detect_Capabilities_Remote;
        logic LTPI_platform_ID_local;
        logic LTPI_Advertise_Capab_local_LOW;
        logic LTPI_Advertise_Capab_local_HIGH;
        logic LTPI_Advertise_Capab_remote_LOW;
        logic LTPI_Advertise_Capab_remote_HIGH;
        logic LTPI_Config_Capab_LOW;
        logic LTPI_Config_Capab_HIGH;
        logic LTPI_Link_Ctrl;
        logic smb_trg_dbg_cntrl_smbstate;
        logic smb_trg_dbg_cntrl_relay_state;
        logic smb_trg_dbg_relay_event_ioc_frame_bus;
        logic smb_cntrl_dbg_cntrl_smbstate;
        logic smb_cntrl_dbg_cntrl_relay_state;
        logic smb_cntrl_dbg_relay_event_ioc_frame_bus;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.LTPI_Link_Status = cpuif_req_masked & (cpuif_addr == 'h0);
        decoded_reg_strb.LTPI_Detect_Capabilities_Local = cpuif_req_masked & (cpuif_addr == 'h4);
        decoded_reg_strb.LTPI_Detect_Capabilities_Remote = cpuif_req_masked & (cpuif_addr == 'h8);
        decoded_reg_strb.LTPI_platform_ID_local = cpuif_req_masked & (cpuif_addr == 'hc);
        decoded_reg_strb.LTPI_Advertise_Capab_local_LOW = cpuif_req_masked & (cpuif_addr == 'h14);
        decoded_reg_strb.LTPI_Advertise_Capab_local_HIGH = cpuif_req_masked & (cpuif_addr == 'h18);
        decoded_reg_strb.LTPI_Advertise_Capab_remote_LOW = cpuif_req_masked & (cpuif_addr == 'h1c);
        decoded_reg_strb.LTPI_Advertise_Capab_remote_HIGH = cpuif_req_masked & (cpuif_addr == 'h20);
        decoded_reg_strb.LTPI_Config_Capab_LOW = cpuif_req_masked & (cpuif_addr == 'h24);
        decoded_reg_strb.LTPI_Config_Capab_HIGH = cpuif_req_masked & (cpuif_addr == 'h28);
        decoded_reg_strb.LTPI_Link_Ctrl = cpuif_req_masked & (cpuif_addr == 'h80);
        decoded_reg_strb.smb_trg_dbg_cntrl_smbstate = cpuif_req_masked & (cpuif_addr == 'h84);
        decoded_reg_strb.smb_trg_dbg_cntrl_relay_state = cpuif_req_masked & (cpuif_addr == 'h88);
        decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus = cpuif_req_masked & (cpuif_addr == 'h8c);
        decoded_reg_strb.smb_cntrl_dbg_cntrl_smbstate = cpuif_req_masked & (cpuif_addr == 'h90);
        decoded_reg_strb.smb_cntrl_dbg_cntrl_relay_state = cpuif_req_masked & (cpuif_addr == 'h94);
        decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus = cpuif_req_masked & (cpuif_addr == 'h98);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic next;
                logic load_next;
            } aligned;
            struct {
                logic next;
                logic load_next;
            } link_lost_error;
            struct {
                logic next;
                logic load_next;
            } frm_CRC_error;
            struct {
                logic next;
                logic load_next;
            } unknown_comma_error;
            struct {
                logic next;
                logic load_next;
            } link_speed_timeout_error;
            struct {
                logic next;
                logic load_next;
            } link_cfg_acpt_timeout_error;
            struct {
                logic next;
                logic load_next;
            } DDR_mode;
            struct {
                logic [3:0] next;
                logic load_next;
            } link_speed;
            struct {
                logic [3:0] next;
                logic load_next;
            } remote_link_state;
            struct {
                logic [3:0] next;
                logic load_next;
            } local_link_state;
        } LTPI_Link_Status;
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } link_Speed_capab;
        } LTPI_Detect_Capabilities_Local;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } remote_Minor_Version;
            struct {
                logic [3:0] next;
                logic load_next;
            } remote_Major_Version;
            struct {
                logic [15:0] next;
                logic load_next;
            } link_Speed_capab;
        } LTPI_Detect_Capabilities_Remote;
        struct {
            struct {
                logic [4:0] next;
                logic load_next;
            } supported_channel;
            struct {
                logic [9:0] next;
                logic load_next;
            } NL_GPIO_nb;
            struct {
                logic [5:0] next;
                logic load_next;
            } I2C_channel_en;
            struct {
                logic next;
                logic load_next;
            } I2C_channel_echo_support;
        } LTPI_Advertise_Capab_local_LOW;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } I2C_channel_speed;
            struct {
                logic [6:0] next;
                logic load_next;
            } UART_channel_cpbl;
            struct {
                logic [15:0] next;
                logic load_next;
            } OEM_capab;
        } LTPI_Advertise_Capab_local_HIGH;
        struct {
            struct {
                logic [4:0] next;
                logic load_next;
            } supported_channel;
            struct {
                logic [9:0] next;
                logic load_next;
            } NL_GPIO_nb;
            struct {
                logic [5:0] next;
                logic load_next;
            } I2C_channel_en;
            struct {
                logic next;
                logic load_next;
            } I2C_channel_echo_support;
        } LTPI_Advertise_Capab_remote_LOW;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } I2C_channel_speed;
            struct {
                logic [6:0] next;
                logic load_next;
            } UART_channel_cpbl;
            struct {
                logic [15:0] next;
                logic load_next;
            } OEM_capab;
        } LTPI_Advertise_Capab_remote_HIGH;
        struct {
            struct {
                logic next;
                logic load_next;
            } software_reset;
            struct {
                logic next;
                logic load_next;
            } retraining_req;
            struct {
                logic [6:0] next;
                logic load_next;
            } I2C_channel_reset;
            struct {
                logic next;
                logic load_next;
            } data_channel_reset;
            struct {
                logic next;
                logic load_next;
            } auto_move_config;
            struct {
                logic next;
                logic load_next;
            } trigger_config_st;
        } LTPI_Link_Ctrl;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } controller_smbstate;
        } smb_trg_dbg_cntrl_smbstate;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } relay_state;
        } smb_trg_dbg_cntrl_relay_state;
        struct {
            struct {
                logic next;
                logic load_next;
            } ia_controller_sda;
            struct {
                logic next;
                logic load_next;
            } ia_controller_scl;
            struct {
                logic next;
                logic load_next;
            } ia_controller_sda_oe;
            struct {
                logic next;
                logic load_next;
            } ia_controller_scl_oe;
            struct {
                logic [3:0] next;
                logic load_next;
            } ioc_frame_o;
            struct {
                logic [3:0] next;
                logic load_next;
            } ioc_frame_i;
            struct {
                logic [3:0] next;
                logic load_next;
            } i2c_event_o;
            struct {
                logic [3:0] next;
                logic load_next;
            } i2c_event_i;
        } smb_trg_dbg_relay_event_ioc_frame_bus;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } controller_smbstate;
        } smb_cntrl_dbg_cntrl_smbstate;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } relay_state;
        } smb_cntrl_dbg_cntrl_relay_state;
        struct {
            struct {
                logic next;
                logic load_next;
            } ia_controller_sda;
            struct {
                logic next;
                logic load_next;
            } ia_controller_scl;
            struct {
                logic next;
                logic load_next;
            } ia_controller_sda_oe;
            struct {
                logic next;
                logic load_next;
            } ia_controller_scl_oe;
            struct {
                logic [3:0] next;
                logic load_next;
            } ioc_frame_o;
            struct {
                logic [3:0] next;
                logic load_next;
            } ioc_frame_i;
            struct {
                logic [3:0] next;
                logic load_next;
            } i2c_event_o;
            struct {
                logic [3:0] next;
                logic load_next;
            } i2c_event_i;
        } smb_cntrl_dbg_relay_event_ioc_frame_bus;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic value;
            } aligned;
            struct {
                logic value;
            } link_lost_error;
            struct {
                logic value;
            } frm_CRC_error;
            struct {
                logic value;
            } unknown_comma_error;
            struct {
                logic value;
            } link_speed_timeout_error;
            struct {
                logic value;
            } link_cfg_acpt_timeout_error;
            struct {
                logic value;
            } DDR_mode;
            struct {
                logic [3:0] value;
            } link_speed;
            struct {
                logic [3:0] value;
            } remote_link_state;
            struct {
                logic [3:0] value;
            } local_link_state;
        } LTPI_Link_Status;
        struct {
            struct {
                logic [15:0] value;
            } link_Speed_capab;
        } LTPI_Detect_Capabilities_Local;
        struct {
            struct {
                logic [3:0] value;
            } remote_Minor_Version;
            struct {
                logic [3:0] value;
            } remote_Major_Version;
            struct {
                logic [15:0] value;
            } link_Speed_capab;
        } LTPI_Detect_Capabilities_Remote;
        struct {
            struct {
                logic [4:0] value;
            } supported_channel;
            struct {
                logic [9:0] value;
            } NL_GPIO_nb;
            struct {
                logic [5:0] value;
            } I2C_channel_en;
            struct {
                logic value;
            } I2C_channel_echo_support;
        } LTPI_Advertise_Capab_local_LOW;
        struct {
            struct {
                logic [5:0] value;
            } I2C_channel_speed;
            struct {
                logic [6:0] value;
            } UART_channel_cpbl;
            struct {
                logic [15:0] value;
            } OEM_capab;
        } LTPI_Advertise_Capab_local_HIGH;
        struct {
            struct {
                logic [4:0] value;
            } supported_channel;
            struct {
                logic [9:0] value;
            } NL_GPIO_nb;
            struct {
                logic [5:0] value;
            } I2C_channel_en;
            struct {
                logic value;
            } I2C_channel_echo_support;
        } LTPI_Advertise_Capab_remote_LOW;
        struct {
            struct {
                logic [5:0] value;
            } I2C_channel_speed;
            struct {
                logic [6:0] value;
            } UART_channel_cpbl;
            struct {
                logic [15:0] value;
            } OEM_capab;
        } LTPI_Advertise_Capab_remote_HIGH;
        struct {
            struct {
                logic value;
            } software_reset;
            struct {
                logic value;
            } retraining_req;
            struct {
                logic [6:0] value;
            } I2C_channel_reset;
            struct {
                logic value;
            } data_channel_reset;
            struct {
                logic value;
            } auto_move_config;
            struct {
                logic value;
            } trigger_config_st;
        } LTPI_Link_Ctrl;
        struct {
            struct {
                logic [31:0] value;
            } controller_smbstate;
        } smb_trg_dbg_cntrl_smbstate;
        struct {
            struct {
                logic [31:0] value;
            } relay_state;
        } smb_trg_dbg_cntrl_relay_state;
        struct {
            struct {
                logic value;
            } ia_controller_sda;
            struct {
                logic value;
            } ia_controller_scl;
            struct {
                logic value;
            } ia_controller_sda_oe;
            struct {
                logic value;
            } ia_controller_scl_oe;
            struct {
                logic [3:0] value;
            } ioc_frame_o;
            struct {
                logic [3:0] value;
            } ioc_frame_i;
            struct {
                logic [3:0] value;
            } i2c_event_o;
            struct {
                logic [3:0] value;
            } i2c_event_i;
        } smb_trg_dbg_relay_event_ioc_frame_bus;
        struct {
            struct {
                logic [31:0] value;
            } controller_smbstate;
        } smb_cntrl_dbg_cntrl_smbstate;
        struct {
            struct {
                logic [31:0] value;
            } relay_state;
        } smb_cntrl_dbg_cntrl_relay_state;
        struct {
            struct {
                logic value;
            } ia_controller_sda;
            struct {
                logic value;
            } ia_controller_scl;
            struct {
                logic value;
            } ia_controller_sda_oe;
            struct {
                logic value;
            } ia_controller_scl_oe;
            struct {
                logic [3:0] value;
            } ioc_frame_o;
            struct {
                logic [3:0] value;
            } ioc_frame_i;
            struct {
                logic [3:0] value;
            } i2c_event_o;
            struct {
                logic [3:0] value;
            } i2c_event_i;
        } smb_cntrl_dbg_relay_event_ioc_frame_bus;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: ltpi_csr_light.LTPI_Link_Status.aligned
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Status.aligned.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.aligned.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.aligned.next = next_c;
        field_combo.LTPI_Link_Status.aligned.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.aligned.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.aligned.load_next) begin
            field_storage.LTPI_Link_Status.aligned.value <= field_combo.LTPI_Link_Status.aligned.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.aligned.value = field_storage.LTPI_Link_Status.aligned.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.link_lost_error
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Status.link_lost_error.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.LTPI_Link_Status.link_lost_error.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.link_lost_error.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.link_lost_error.next = next_c;
        field_combo.LTPI_Link_Status.link_lost_error.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.link_lost_error.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.link_lost_error.load_next) begin
            field_storage.LTPI_Link_Status.link_lost_error.value <= field_combo.LTPI_Link_Status.link_lost_error.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.link_lost_error.value = field_storage.LTPI_Link_Status.link_lost_error.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.frm_CRC_error
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Status.frm_CRC_error.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.LTPI_Link_Status.frm_CRC_error.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.frm_CRC_error.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.frm_CRC_error.next = next_c;
        field_combo.LTPI_Link_Status.frm_CRC_error.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.frm_CRC_error.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.frm_CRC_error.load_next) begin
            field_storage.LTPI_Link_Status.frm_CRC_error.value <= field_combo.LTPI_Link_Status.frm_CRC_error.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.frm_CRC_error.value = field_storage.LTPI_Link_Status.frm_CRC_error.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.unknown_comma_error
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Status.unknown_comma_error.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.LTPI_Link_Status.unknown_comma_error.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.unknown_comma_error.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.unknown_comma_error.next = next_c;
        field_combo.LTPI_Link_Status.unknown_comma_error.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.unknown_comma_error.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.unknown_comma_error.load_next) begin
            field_storage.LTPI_Link_Status.unknown_comma_error.value <= field_combo.LTPI_Link_Status.unknown_comma_error.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.unknown_comma_error.value = field_storage.LTPI_Link_Status.unknown_comma_error.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.link_speed_timeout_error
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Status.link_speed_timeout_error.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.LTPI_Link_Status.link_speed_timeout_error.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.link_speed_timeout_error.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.link_speed_timeout_error.next = next_c;
        field_combo.LTPI_Link_Status.link_speed_timeout_error.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.link_speed_timeout_error.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.link_speed_timeout_error.load_next) begin
            field_storage.LTPI_Link_Status.link_speed_timeout_error.value <= field_combo.LTPI_Link_Status.link_speed_timeout_error.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.link_speed_timeout_error.value = field_storage.LTPI_Link_Status.link_speed_timeout_error.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.link_cfg_acpt_timeout_error
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Status.link_cfg_acpt_timeout_error.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.LTPI_Link_Status.link_cfg_acpt_timeout_error.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.link_cfg_acpt_timeout_error.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.link_cfg_acpt_timeout_error.next = next_c;
        field_combo.LTPI_Link_Status.link_cfg_acpt_timeout_error.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.link_cfg_acpt_timeout_error.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.link_cfg_acpt_timeout_error.load_next) begin
            field_storage.LTPI_Link_Status.link_cfg_acpt_timeout_error.value <= field_combo.LTPI_Link_Status.link_cfg_acpt_timeout_error.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.link_cfg_acpt_timeout_error.value = field_storage.LTPI_Link_Status.link_cfg_acpt_timeout_error.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.DDR_mode
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Status.DDR_mode.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.DDR_mode.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.DDR_mode.next = next_c;
        field_combo.LTPI_Link_Status.DDR_mode.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.DDR_mode.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.DDR_mode.load_next) begin
            field_storage.LTPI_Link_Status.DDR_mode.value <= field_combo.LTPI_Link_Status.DDR_mode.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.DDR_mode.value = field_storage.LTPI_Link_Status.DDR_mode.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.link_speed
    always_comb begin
        automatic logic [3:0] next_c = field_storage.LTPI_Link_Status.link_speed.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.link_speed.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.link_speed.next = next_c;
        field_combo.LTPI_Link_Status.link_speed.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.link_speed.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.link_speed.load_next) begin
            field_storage.LTPI_Link_Status.link_speed.value <= field_combo.LTPI_Link_Status.link_speed.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.link_speed.value = field_storage.LTPI_Link_Status.link_speed.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.remote_link_state
    always_comb begin
        automatic logic [3:0] next_c = field_storage.LTPI_Link_Status.remote_link_state.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.remote_link_state.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.remote_link_state.next = next_c;
        field_combo.LTPI_Link_Status.remote_link_state.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.remote_link_state.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.remote_link_state.load_next) begin
            field_storage.LTPI_Link_Status.remote_link_state.value <= field_combo.LTPI_Link_Status.remote_link_state.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.remote_link_state.value = field_storage.LTPI_Link_Status.remote_link_state.value;
    // Field: ltpi_csr_light.LTPI_Link_Status.local_link_state
    always_comb begin
        automatic logic [3:0] next_c = field_storage.LTPI_Link_Status.local_link_state.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Link_Status.local_link_state.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Status.local_link_state.next = next_c;
        field_combo.LTPI_Link_Status.local_link_state.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Status.local_link_state.value <= 'h0;
        end else if(field_combo.LTPI_Link_Status.local_link_state.load_next) begin
            field_storage.LTPI_Link_Status.local_link_state.value <= field_combo.LTPI_Link_Status.local_link_state.next;
        end
    end
    assign hwif_out.LTPI_Link_Status.local_link_state.value = field_storage.LTPI_Link_Status.local_link_state.value;
    assign hwif_out.LTPI_Detect_Capabilities_Local.local_Minor_Version.value = 'h1;
    assign hwif_out.LTPI_Detect_Capabilities_Local.local_Major_Version.value = 'h1;
    // Field: ltpi_csr_light.LTPI_Detect_Capabilities_Local.link_Speed_capab
    always_comb begin
        automatic logic [15:0] next_c = field_storage.LTPI_Detect_Capabilities_Local.link_Speed_capab.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Detect_Capabilities_Local && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Detect_Capabilities_Local.link_Speed_capab.value & ~decoded_wr_biten[23:8]) | (decoded_wr_data[23:8] & decoded_wr_biten[23:8]);
            load_next_c = '1;
        end
        field_combo.LTPI_Detect_Capabilities_Local.link_Speed_capab.next = next_c;
        field_combo.LTPI_Detect_Capabilities_Local.link_Speed_capab.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Detect_Capabilities_Local.link_Speed_capab.value <= 'h800f;
        end else if(field_combo.LTPI_Detect_Capabilities_Local.link_Speed_capab.load_next) begin
            field_storage.LTPI_Detect_Capabilities_Local.link_Speed_capab.value <= field_combo.LTPI_Detect_Capabilities_Local.link_Speed_capab.next;
        end
    end
    assign hwif_out.LTPI_Detect_Capabilities_Local.link_Speed_capab.value = field_storage.LTPI_Detect_Capabilities_Local.link_Speed_capab.value;
    // Field: ltpi_csr_light.LTPI_Detect_Capabilities_Remote.remote_Minor_Version
    always_comb begin
        automatic logic [3:0] next_c = field_storage.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.next = next_c;
        field_combo.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.value <= 'h0;
        end else if(field_combo.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.load_next) begin
            field_storage.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.value <= field_combo.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.next;
        end
    end
    assign hwif_out.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.value = field_storage.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.value;
    // Field: ltpi_csr_light.LTPI_Detect_Capabilities_Remote.remote_Major_Version
    always_comb begin
        automatic logic [3:0] next_c = field_storage.LTPI_Detect_Capabilities_Remote.remote_Major_Version.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Detect_Capabilities_Remote.remote_Major_Version.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Detect_Capabilities_Remote.remote_Major_Version.next = next_c;
        field_combo.LTPI_Detect_Capabilities_Remote.remote_Major_Version.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Detect_Capabilities_Remote.remote_Major_Version.value <= 'h0;
        end else if(field_combo.LTPI_Detect_Capabilities_Remote.remote_Major_Version.load_next) begin
            field_storage.LTPI_Detect_Capabilities_Remote.remote_Major_Version.value <= field_combo.LTPI_Detect_Capabilities_Remote.remote_Major_Version.next;
        end
    end
    assign hwif_out.LTPI_Detect_Capabilities_Remote.remote_Major_Version.value = field_storage.LTPI_Detect_Capabilities_Remote.remote_Major_Version.value;
    // Field: ltpi_csr_light.LTPI_Detect_Capabilities_Remote.link_Speed_capab
    always_comb begin
        automatic logic [15:0] next_c = field_storage.LTPI_Detect_Capabilities_Remote.link_Speed_capab.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Detect_Capabilities_Remote.link_Speed_capab.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Detect_Capabilities_Remote.link_Speed_capab.next = next_c;
        field_combo.LTPI_Detect_Capabilities_Remote.link_Speed_capab.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Detect_Capabilities_Remote.link_Speed_capab.value <= 'h0;
        end else if(field_combo.LTPI_Detect_Capabilities_Remote.link_Speed_capab.load_next) begin
            field_storage.LTPI_Detect_Capabilities_Remote.link_Speed_capab.value <= field_combo.LTPI_Detect_Capabilities_Remote.link_Speed_capab.next;
        end
    end
    assign hwif_out.LTPI_Detect_Capabilities_Remote.link_Speed_capab.value = field_storage.LTPI_Detect_Capabilities_Remote.link_Speed_capab.value;
    assign hwif_out.LTPI_platform_ID_local.platform_ID_local.value = 'h1234;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_local_LOW.supported_channel
    always_comb begin
        automatic logic [4:0] next_c = field_storage.LTPI_Advertise_Capab_local_LOW.supported_channel.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Advertise_Capab_local_LOW && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Advertise_Capab_local_LOW.supported_channel.value & ~decoded_wr_biten[4:0]) | (decoded_wr_data[4:0] & decoded_wr_biten[4:0]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_local_LOW.supported_channel.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_local_LOW.supported_channel.next = next_c;
        field_combo.LTPI_Advertise_Capab_local_LOW.supported_channel.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_local_LOW.supported_channel.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_local_LOW.supported_channel.load_next) begin
            field_storage.LTPI_Advertise_Capab_local_LOW.supported_channel.value <= field_combo.LTPI_Advertise_Capab_local_LOW.supported_channel.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_local_LOW.supported_channel.value = field_storage.LTPI_Advertise_Capab_local_LOW.supported_channel.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb
    always_comb begin
        automatic logic [9:0] next_c = field_storage.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Advertise_Capab_local_LOW && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.value & ~decoded_wr_biten[17:8]) | (decoded_wr_data[17:8] & decoded_wr_biten[17:8]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.next = next_c;
        field_combo.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.load_next) begin
            field_storage.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.value <= field_combo.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.value = field_storage.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_local_LOW.I2C_channel_en
    always_comb begin
        automatic logic [5:0] next_c = field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Advertise_Capab_local_LOW && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.value & ~decoded_wr_biten[29:24]) | (decoded_wr_data[29:24] & decoded_wr_biten[29:24]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.next = next_c;
        field_combo.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.load_next) begin
            field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.value <= field_combo.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.value = field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Advertise_Capab_local_LOW && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.value & ~decoded_wr_biten[30:30]) | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.next = next_c;
        field_combo.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.load_next) begin
            field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.value <= field_combo.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.value = field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed
    always_comb begin
        automatic logic [5:0] next_c = field_storage.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Advertise_Capab_local_HIGH && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.value & ~decoded_wr_biten[5:0]) | (decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.next = next_c;
        field_combo.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.load_next) begin
            field_storage.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.value <= field_combo.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.value = field_storage.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl
    always_comb begin
        automatic logic [6:0] next_c = field_storage.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Advertise_Capab_local_HIGH && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.value & ~decoded_wr_biten[14:8]) | (decoded_wr_data[14:8] & decoded_wr_biten[14:8]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.next = next_c;
        field_combo.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.load_next) begin
            field_storage.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.value <= field_combo.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.value = field_storage.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_local_HIGH.OEM_capab
    always_comb begin
        automatic logic [15:0] next_c = field_storage.LTPI_Advertise_Capab_local_HIGH.OEM_capab.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Advertise_Capab_local_HIGH && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Advertise_Capab_local_HIGH.OEM_capab.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end else if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_local_HIGH.OEM_capab.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_local_HIGH.OEM_capab.next = next_c;
        field_combo.LTPI_Advertise_Capab_local_HIGH.OEM_capab.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_local_HIGH.OEM_capab.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_local_HIGH.OEM_capab.load_next) begin
            field_storage.LTPI_Advertise_Capab_local_HIGH.OEM_capab.value <= field_combo.LTPI_Advertise_Capab_local_HIGH.OEM_capab.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_local_HIGH.OEM_capab.value = field_storage.LTPI_Advertise_Capab_local_HIGH.OEM_capab.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_remote_LOW.supported_channel
    always_comb begin
        automatic logic [4:0] next_c = field_storage.LTPI_Advertise_Capab_remote_LOW.supported_channel.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_remote_LOW.supported_channel.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_remote_LOW.supported_channel.next = next_c;
        field_combo.LTPI_Advertise_Capab_remote_LOW.supported_channel.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_remote_LOW.supported_channel.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_remote_LOW.supported_channel.load_next) begin
            field_storage.LTPI_Advertise_Capab_remote_LOW.supported_channel.value <= field_combo.LTPI_Advertise_Capab_remote_LOW.supported_channel.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_remote_LOW.supported_channel.value = field_storage.LTPI_Advertise_Capab_remote_LOW.supported_channel.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb
    always_comb begin
        automatic logic [9:0] next_c = field_storage.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.next = next_c;
        field_combo.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.load_next) begin
            field_storage.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.value <= field_combo.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.value = field_storage.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en
    always_comb begin
        automatic logic [5:0] next_c = field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.next = next_c;
        field_combo.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.load_next) begin
            field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.value <= field_combo.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.value = field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.next = next_c;
        field_combo.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.load_next) begin
            field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.value <= field_combo.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.value = field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed
    always_comb begin
        automatic logic [5:0] next_c = field_storage.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.next = next_c;
        field_combo.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.load_next) begin
            field_storage.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.value <= field_combo.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.value = field_storage.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl
    always_comb begin
        automatic logic [6:0] next_c = field_storage.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.next = next_c;
        field_combo.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.load_next) begin
            field_storage.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.value <= field_combo.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.value = field_storage.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.value;
    // Field: ltpi_csr_light.LTPI_Advertise_Capab_remote_HIGH.OEM_capab
    always_comb begin
        automatic logic [15:0] next_c = field_storage.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.next;
            load_next_c = '1;
        end
        field_combo.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.next = next_c;
        field_combo.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.value <= 'h0;
        end else if(field_combo.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.load_next) begin
            field_storage.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.value <= field_combo.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.next;
        end
    end
    assign hwif_out.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.value = field_storage.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.value;
    assign hwif_out.LTPI_Config_Capab_LOW.supported_channel.value = 'h7;
    assign hwif_out.LTPI_Config_Capab_LOW.NL_GPIO_nb.value = 'h3ff;
    assign hwif_out.LTPI_Config_Capab_LOW.I2C_channel_en.value = 'h3f;
    assign hwif_out.LTPI_Config_Capab_LOW.I2C_channel_echo_support.value = 'h1;
    assign hwif_out.LTPI_Config_Capab_HIGH.I2C_channel_speed.value = 'h0;
    assign hwif_out.LTPI_Config_Capab_HIGH.UART_channel_cpbl.value = 'h8;
    assign hwif_out.LTPI_Config_Capab_HIGH.OEM_capab.value = 'h0;
    // Field: ltpi_csr_light.LTPI_Link_Ctrl.software_reset
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Ctrl.software_reset.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Link_Ctrl.software_reset.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Ctrl.software_reset.next = next_c;
        field_combo.LTPI_Link_Ctrl.software_reset.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Ctrl.software_reset.value <= 'h0;
        end else if(field_combo.LTPI_Link_Ctrl.software_reset.load_next) begin
            field_storage.LTPI_Link_Ctrl.software_reset.value <= field_combo.LTPI_Link_Ctrl.software_reset.next;
        end
    end
    assign hwif_out.LTPI_Link_Ctrl.software_reset.value = field_storage.LTPI_Link_Ctrl.software_reset.value;
    // Field: ltpi_csr_light.LTPI_Link_Ctrl.retraining_req
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Ctrl.retraining_req.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Link_Ctrl.retraining_req.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Ctrl.retraining_req.next = next_c;
        field_combo.LTPI_Link_Ctrl.retraining_req.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Ctrl.retraining_req.value <= 'h0;
        end else if(field_combo.LTPI_Link_Ctrl.retraining_req.load_next) begin
            field_storage.LTPI_Link_Ctrl.retraining_req.value <= field_combo.LTPI_Link_Ctrl.retraining_req.next;
        end
    end
    assign hwif_out.LTPI_Link_Ctrl.retraining_req.value = field_storage.LTPI_Link_Ctrl.retraining_req.value;
    // Field: ltpi_csr_light.LTPI_Link_Ctrl.I2C_channel_reset
    always_comb begin
        automatic logic [6:0] next_c = field_storage.LTPI_Link_Ctrl.I2C_channel_reset.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Link_Ctrl.I2C_channel_reset.value & ~decoded_wr_biten[8:2]) | (decoded_wr_data[8:2] & decoded_wr_biten[8:2]);
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Ctrl.I2C_channel_reset.next = next_c;
        field_combo.LTPI_Link_Ctrl.I2C_channel_reset.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Ctrl.I2C_channel_reset.value <= 'h0;
        end else if(field_combo.LTPI_Link_Ctrl.I2C_channel_reset.load_next) begin
            field_storage.LTPI_Link_Ctrl.I2C_channel_reset.value <= field_combo.LTPI_Link_Ctrl.I2C_channel_reset.next;
        end
    end
    assign hwif_out.LTPI_Link_Ctrl.I2C_channel_reset.value = field_storage.LTPI_Link_Ctrl.I2C_channel_reset.value;
    // Field: ltpi_csr_light.LTPI_Link_Ctrl.data_channel_reset
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Ctrl.data_channel_reset.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Link_Ctrl.data_channel_reset.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Ctrl.data_channel_reset.next = next_c;
        field_combo.LTPI_Link_Ctrl.data_channel_reset.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Ctrl.data_channel_reset.value <= 'h0;
        end else if(field_combo.LTPI_Link_Ctrl.data_channel_reset.load_next) begin
            field_storage.LTPI_Link_Ctrl.data_channel_reset.value <= field_combo.LTPI_Link_Ctrl.data_channel_reset.next;
        end
    end
    assign hwif_out.LTPI_Link_Ctrl.data_channel_reset.value = field_storage.LTPI_Link_Ctrl.data_channel_reset.value;
    // Field: ltpi_csr_light.LTPI_Link_Ctrl.auto_move_config
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Ctrl.auto_move_config.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Link_Ctrl.auto_move_config.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Ctrl.auto_move_config.next = next_c;
        field_combo.LTPI_Link_Ctrl.auto_move_config.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Ctrl.auto_move_config.value <= 'h0;
        end else if(field_combo.LTPI_Link_Ctrl.auto_move_config.load_next) begin
            field_storage.LTPI_Link_Ctrl.auto_move_config.value <= field_combo.LTPI_Link_Ctrl.auto_move_config.next;
        end
    end
    assign hwif_out.LTPI_Link_Ctrl.auto_move_config.value = field_storage.LTPI_Link_Ctrl.auto_move_config.value;
    // Field: ltpi_csr_light.LTPI_Link_Ctrl.trigger_config_st
    always_comb begin
        automatic logic [0:0] next_c = field_storage.LTPI_Link_Ctrl.trigger_config_st.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.LTPI_Link_Ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.LTPI_Link_Ctrl.trigger_config_st.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.LTPI_Link_Ctrl.trigger_config_st.next = next_c;
        field_combo.LTPI_Link_Ctrl.trigger_config_st.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.LTPI_Link_Ctrl.trigger_config_st.value <= 'h1;
        end else if(field_combo.LTPI_Link_Ctrl.trigger_config_st.load_next) begin
            field_storage.LTPI_Link_Ctrl.trigger_config_st.value <= field_combo.LTPI_Link_Ctrl.trigger_config_st.next;
        end
    end
    assign hwif_out.LTPI_Link_Ctrl.trigger_config_st.value = field_storage.LTPI_Link_Ctrl.trigger_config_st.value;
    // Field: ltpi_csr_light.smb_trg_dbg_cntrl_smbstate.controller_smbstate
    always_comb begin
        automatic logic [31:0] next_c = field_storage.smb_trg_dbg_cntrl_smbstate.controller_smbstate.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_cntrl_smbstate.controller_smbstate.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_cntrl_smbstate.controller_smbstate.next = next_c;
        field_combo.smb_trg_dbg_cntrl_smbstate.controller_smbstate.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_cntrl_smbstate.controller_smbstate.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_cntrl_smbstate.controller_smbstate.load_next) begin
            field_storage.smb_trg_dbg_cntrl_smbstate.controller_smbstate.value <= field_combo.smb_trg_dbg_cntrl_smbstate.controller_smbstate.next;
        end
    end
    assign hwif_out.smb_trg_dbg_cntrl_smbstate.controller_smbstate.value = field_storage.smb_trg_dbg_cntrl_smbstate.controller_smbstate.value;
    // Field: ltpi_csr_light.smb_trg_dbg_cntrl_relay_state.relay_state
    always_comb begin
        automatic logic [31:0] next_c = field_storage.smb_trg_dbg_cntrl_relay_state.relay_state.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_cntrl_relay_state.relay_state.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_cntrl_relay_state.relay_state.next = next_c;
        field_combo.smb_trg_dbg_cntrl_relay_state.relay_state.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_cntrl_relay_state.relay_state.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_cntrl_relay_state.relay_state.load_next) begin
            field_storage.smb_trg_dbg_cntrl_relay_state.relay_state.value <= field_combo.smb_trg_dbg_cntrl_relay_state.relay_state.next;
        end
    end
    assign hwif_out.smb_trg_dbg_cntrl_relay_state.relay_state.value = field_storage.smb_trg_dbg_cntrl_relay_state.relay_state.value;
    // Field: ltpi_csr_light.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda
    always_comb begin
        automatic logic [0:0] next_c = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.next = next_c;
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.load_next) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value <= field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.next;
        end
    end
    assign hwif_out.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value;
    // Field: ltpi_csr_light.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl
    always_comb begin
        automatic logic [0:0] next_c = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.next = next_c;
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.load_next) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value <= field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.next;
        end
    end
    assign hwif_out.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value;
    // Field: ltpi_csr_light.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe
    always_comb begin
        automatic logic [0:0] next_c = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.next = next_c;
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.load_next) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value <= field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.next;
        end
    end
    assign hwif_out.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value;
    // Field: ltpi_csr_light.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe
    always_comb begin
        automatic logic [0:0] next_c = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.next = next_c;
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.load_next) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value <= field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.next;
        end
    end
    assign hwif_out.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value;
    // Field: ltpi_csr_light.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o
    always_comb begin
        automatic logic [3:0] next_c = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.next = next_c;
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.load_next) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value <= field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.next;
        end
    end
    assign hwif_out.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value;
    // Field: ltpi_csr_light.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i
    always_comb begin
        automatic logic [3:0] next_c = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.next = next_c;
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.load_next) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value <= field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.next;
        end
    end
    assign hwif_out.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value;
    // Field: ltpi_csr_light.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o
    always_comb begin
        automatic logic [3:0] next_c = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.next = next_c;
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.load_next) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.value <= field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.next;
        end
    end
    assign hwif_out.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.value = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.value;
    // Field: ltpi_csr_light.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i
    always_comb begin
        automatic logic [3:0] next_c = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.next;
            load_next_c = '1;
        end
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.next = next_c;
        field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.value <= 'h0;
        end else if(field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.load_next) begin
            field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.value <= field_combo.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.next;
        end
    end
    assign hwif_out.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.value = field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate
    always_comb begin
        automatic logic [31:0] next_c = field_storage.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.next = next_c;
        field_combo.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.load_next) begin
            field_storage.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.value <= field_combo.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.value = field_storage.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_cntrl_relay_state.relay_state
    always_comb begin
        automatic logic [31:0] next_c = field_storage.smb_cntrl_dbg_cntrl_relay_state.relay_state.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_cntrl_relay_state.relay_state.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_cntrl_relay_state.relay_state.next = next_c;
        field_combo.smb_cntrl_dbg_cntrl_relay_state.relay_state.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_cntrl_relay_state.relay_state.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_cntrl_relay_state.relay_state.load_next) begin
            field_storage.smb_cntrl_dbg_cntrl_relay_state.relay_state.value <= field_combo.smb_cntrl_dbg_cntrl_relay_state.relay_state.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_cntrl_relay_state.relay_state.value = field_storage.smb_cntrl_dbg_cntrl_relay_state.relay_state.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda
    always_comb begin
        automatic logic [0:0] next_c = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.next = next_c;
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.load_next) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value <= field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl
    always_comb begin
        automatic logic [0:0] next_c = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.next = next_c;
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.load_next) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value <= field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe
    always_comb begin
        automatic logic [0:0] next_c = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.next = next_c;
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.load_next) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value <= field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe
    always_comb begin
        automatic logic [0:0] next_c = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.next = next_c;
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.load_next) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value <= field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o
    always_comb begin
        automatic logic [3:0] next_c = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.next = next_c;
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.load_next) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value <= field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i
    always_comb begin
        automatic logic [3:0] next_c = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.next = next_c;
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.load_next) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value <= field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o
    always_comb begin
        automatic logic [3:0] next_c = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.next = next_c;
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.load_next) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.value <= field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.value = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.value;
    // Field: ltpi_csr_light.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i
    always_comb begin
        automatic logic [3:0] next_c = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.value;
        automatic logic load_next_c = '0;
        if(1) begin // HW Write
            next_c = hwif_in.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.next;
            load_next_c = '1;
        end
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.next = next_c;
        field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.value <= 'h0;
        end else if(field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.load_next) begin
            field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.value <= field_combo.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.next;
        end
    end
    assign hwif_out.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.value = field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.value;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [31:0] readback_array[17];
    assign readback_array[0][0:0] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.aligned.value : '0;
    assign readback_array[0][1:1] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.link_lost_error.value : '0;
    assign readback_array[0][2:2] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.frm_CRC_error.value : '0;
    assign readback_array[0][3:3] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.unknown_comma_error.value : '0;
    assign readback_array[0][4:4] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.link_speed_timeout_error.value : '0;
    assign readback_array[0][5:5] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.link_cfg_acpt_timeout_error.value : '0;
    assign readback_array[0][6:6] = '0;
    assign readback_array[0][7:7] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.DDR_mode.value : '0;
    assign readback_array[0][11:8] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.link_speed.value : '0;
    assign readback_array[0][15:12] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.remote_link_state.value : '0;
    assign readback_array[0][19:16] = (decoded_reg_strb.LTPI_Link_Status && !decoded_req_is_wr) ? field_storage.LTPI_Link_Status.local_link_state.value : '0;
    assign readback_array[0][31:20] = '0;
    assign readback_array[1][3:0] = (decoded_reg_strb.LTPI_Detect_Capabilities_Local && !decoded_req_is_wr) ? 'h1 : '0;
    assign readback_array[1][7:4] = (decoded_reg_strb.LTPI_Detect_Capabilities_Local && !decoded_req_is_wr) ? 'h1 : '0;
    assign readback_array[1][23:8] = (decoded_reg_strb.LTPI_Detect_Capabilities_Local && !decoded_req_is_wr) ? field_storage.LTPI_Detect_Capabilities_Local.link_Speed_capab.value : '0;
    assign readback_array[1][31:24] = '0;
    assign readback_array[2][3:0] = (decoded_reg_strb.LTPI_Detect_Capabilities_Remote && !decoded_req_is_wr) ? field_storage.LTPI_Detect_Capabilities_Remote.remote_Minor_Version.value : '0;
    assign readback_array[2][7:4] = (decoded_reg_strb.LTPI_Detect_Capabilities_Remote && !decoded_req_is_wr) ? field_storage.LTPI_Detect_Capabilities_Remote.remote_Major_Version.value : '0;
    assign readback_array[2][23:8] = (decoded_reg_strb.LTPI_Detect_Capabilities_Remote && !decoded_req_is_wr) ? field_storage.LTPI_Detect_Capabilities_Remote.link_Speed_capab.value : '0;
    assign readback_array[2][31:24] = '0;
    assign readback_array[3][15:0] = (decoded_reg_strb.LTPI_platform_ID_local && !decoded_req_is_wr) ? 'h1234 : '0;
    assign readback_array[3][31:16] = '0;
    assign readback_array[4][4:0] = (decoded_reg_strb.LTPI_Advertise_Capab_local_LOW && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_local_LOW.supported_channel.value : '0;
    assign readback_array[4][7:5] = '0;
    assign readback_array[4][17:8] = (decoded_reg_strb.LTPI_Advertise_Capab_local_LOW && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_local_LOW.NL_GPIO_nb.value : '0;
    assign readback_array[4][23:18] = '0;
    assign readback_array[4][29:24] = (decoded_reg_strb.LTPI_Advertise_Capab_local_LOW && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_en.value : '0;
    assign readback_array[4][30:30] = (decoded_reg_strb.LTPI_Advertise_Capab_local_LOW && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_local_LOW.I2C_channel_echo_support.value : '0;
    assign readback_array[4][31:31] = '0;
    assign readback_array[5][5:0] = (decoded_reg_strb.LTPI_Advertise_Capab_local_HIGH && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_local_HIGH.I2C_channel_speed.value : '0;
    assign readback_array[5][7:6] = '0;
    assign readback_array[5][14:8] = (decoded_reg_strb.LTPI_Advertise_Capab_local_HIGH && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_local_HIGH.UART_channel_cpbl.value : '0;
    assign readback_array[5][15:15] = '0;
    assign readback_array[5][31:16] = (decoded_reg_strb.LTPI_Advertise_Capab_local_HIGH && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_local_HIGH.OEM_capab.value : '0;
    assign readback_array[6][4:0] = (decoded_reg_strb.LTPI_Advertise_Capab_remote_LOW && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_remote_LOW.supported_channel.value : '0;
    assign readback_array[6][7:5] = '0;
    assign readback_array[6][17:8] = (decoded_reg_strb.LTPI_Advertise_Capab_remote_LOW && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_remote_LOW.NL_GPIO_nb.value : '0;
    assign readback_array[6][23:18] = '0;
    assign readback_array[6][29:24] = (decoded_reg_strb.LTPI_Advertise_Capab_remote_LOW && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_en.value : '0;
    assign readback_array[6][30:30] = (decoded_reg_strb.LTPI_Advertise_Capab_remote_LOW && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_remote_LOW.I2C_channel_echo_support.value : '0;
    assign readback_array[6][31:31] = '0;
    assign readback_array[7][5:0] = (decoded_reg_strb.LTPI_Advertise_Capab_remote_HIGH && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_remote_HIGH.I2C_channel_speed.value : '0;
    assign readback_array[7][7:6] = '0;
    assign readback_array[7][14:8] = (decoded_reg_strb.LTPI_Advertise_Capab_remote_HIGH && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_remote_HIGH.UART_channel_cpbl.value : '0;
    assign readback_array[7][15:15] = '0;
    assign readback_array[7][31:16] = (decoded_reg_strb.LTPI_Advertise_Capab_remote_HIGH && !decoded_req_is_wr) ? field_storage.LTPI_Advertise_Capab_remote_HIGH.OEM_capab.value : '0;
    assign readback_array[8][4:0] = (decoded_reg_strb.LTPI_Config_Capab_LOW && !decoded_req_is_wr) ? 'h7 : '0;
    assign readback_array[8][7:5] = '0;
    assign readback_array[8][17:8] = (decoded_reg_strb.LTPI_Config_Capab_LOW && !decoded_req_is_wr) ? 'h3ff : '0;
    assign readback_array[8][23:18] = '0;
    assign readback_array[8][29:24] = (decoded_reg_strb.LTPI_Config_Capab_LOW && !decoded_req_is_wr) ? 'h3f : '0;
    assign readback_array[8][30:30] = (decoded_reg_strb.LTPI_Config_Capab_LOW && !decoded_req_is_wr) ? 'h1 : '0;
    assign readback_array[8][31:31] = '0;
    assign readback_array[9][5:0] = (decoded_reg_strb.LTPI_Config_Capab_HIGH && !decoded_req_is_wr) ? 'h0 : '0;
    assign readback_array[9][7:6] = '0;
    assign readback_array[9][14:8] = (decoded_reg_strb.LTPI_Config_Capab_HIGH && !decoded_req_is_wr) ? 'h8 : '0;
    assign readback_array[9][15:15] = '0;
    assign readback_array[9][31:16] = (decoded_reg_strb.LTPI_Config_Capab_HIGH && !decoded_req_is_wr) ? 'h0 : '0;
    assign readback_array[10][0:0] = (decoded_reg_strb.LTPI_Link_Ctrl && !decoded_req_is_wr) ? field_storage.LTPI_Link_Ctrl.software_reset.value : '0;
    assign readback_array[10][1:1] = (decoded_reg_strb.LTPI_Link_Ctrl && !decoded_req_is_wr) ? field_storage.LTPI_Link_Ctrl.retraining_req.value : '0;
    assign readback_array[10][8:2] = (decoded_reg_strb.LTPI_Link_Ctrl && !decoded_req_is_wr) ? field_storage.LTPI_Link_Ctrl.I2C_channel_reset.value : '0;
    assign readback_array[10][9:9] = (decoded_reg_strb.LTPI_Link_Ctrl && !decoded_req_is_wr) ? field_storage.LTPI_Link_Ctrl.data_channel_reset.value : '0;
    assign readback_array[10][10:10] = (decoded_reg_strb.LTPI_Link_Ctrl && !decoded_req_is_wr) ? field_storage.LTPI_Link_Ctrl.auto_move_config.value : '0;
    assign readback_array[10][11:11] = (decoded_reg_strb.LTPI_Link_Ctrl && !decoded_req_is_wr) ? field_storage.LTPI_Link_Ctrl.trigger_config_st.value : '0;
    assign readback_array[10][31:12] = '0;
    assign readback_array[11][31:0] = (decoded_reg_strb.smb_trg_dbg_cntrl_smbstate && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_cntrl_smbstate.controller_smbstate.value : '0;
    assign readback_array[12][31:0] = (decoded_reg_strb.smb_trg_dbg_cntrl_relay_state && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_cntrl_relay_state.relay_state.value : '0;
    assign readback_array[13][0:0] = (decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value : '0;
    assign readback_array[13][1:1] = (decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value : '0;
    assign readback_array[13][2:2] = (decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value : '0;
    assign readback_array[13][3:3] = (decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value : '0;
    assign readback_array[13][7:4] = (decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value : '0;
    assign readback_array[13][11:8] = (decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value : '0;
    assign readback_array[13][15:12] = (decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_o.value : '0;
    assign readback_array[13][19:16] = (decoded_reg_strb.smb_trg_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_trg_dbg_relay_event_ioc_frame_bus.i2c_event_i.value : '0;
    assign readback_array[13][31:20] = '0;
    assign readback_array[14][31:0] = (decoded_reg_strb.smb_cntrl_dbg_cntrl_smbstate && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_cntrl_smbstate.controller_smbstate.value : '0;
    assign readback_array[15][31:0] = (decoded_reg_strb.smb_cntrl_dbg_cntrl_relay_state && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_cntrl_relay_state.relay_state.value : '0;
    assign readback_array[16][0:0] = (decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda.value : '0;
    assign readback_array[16][1:1] = (decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl.value : '0;
    assign readback_array[16][2:2] = (decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_sda_oe.value : '0;
    assign readback_array[16][3:3] = (decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ia_controller_scl_oe.value : '0;
    assign readback_array[16][7:4] = (decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_o.value : '0;
    assign readback_array[16][11:8] = (decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.ioc_frame_i.value : '0;
    assign readback_array[16][15:12] = (decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_o.value : '0;
    assign readback_array[16][19:16] = (decoded_reg_strb.smb_cntrl_dbg_relay_event_ioc_frame_bus && !decoded_req_is_wr) ? field_storage.smb_cntrl_dbg_relay_event_ioc_frame_bus.i2c_event_i.value : '0;
    assign readback_array[16][31:20] = '0;


    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<17; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    always_ff @(posedge clk) begin
        if(rst) begin
            cpuif_rd_ack <= '0;
            cpuif_rd_data <= '0;
            cpuif_rd_err <= '0;
        end else begin
            cpuif_rd_ack <= readback_done;
            cpuif_rd_data <= readback_data;
            cpuif_rd_err <= readback_err;
        end
    end


endmodule