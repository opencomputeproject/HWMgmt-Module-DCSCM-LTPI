// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module ltpi_data_channel_controller_csr_rdl (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [10:0] s_cpuif_addr,
        input wire [7:0] s_cpuif_wr_data,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [7:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input ltpi_data_channel_controller_csr_rdl_pkg::ltpi_data_channel_controller_csr_rdl__in_t hwif_in,
        output ltpi_data_channel_controller_csr_rdl_pkg::ltpi_data_channel_controller_csr_rdl__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [10:0] cpuif_addr;
    logic [7:0] cpuif_wr_data;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [7:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read latency > write latency. May need to delay next write that follows a read
    logic [0:0] cpuif_req_stall_sr;
    always_ff @(posedge clk) begin
        if(rst) begin
            cpuif_req_stall_sr <= '0;
        end else if(cpuif_req && !cpuif_req_is_wr) begin
            cpuif_req_stall_sr <= '1;
        end else begin
            cpuif_req_stall_sr <= (cpuif_req_stall_sr >> 'd1);
        end
    end
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = cpuif_req_stall_sr[0];
    assign cpuif_req_masked = cpuif_req & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic REQ_CMD;
        logic REQ_TAG;
        logic REQ_BEN;
        logic REQ_ADDR0;
        logic REQ_ADDR1;
        logic REQ_ADDR2;
        logic REQ_ADDR3;
        logic REQ_DATA0;
        logic REQ_DATA1;
        logic REQ_DATA2;
        logic REQ_DATA3;
        logic RESP_CMD;
        logic RESP_TAG;
        logic RESP_BEN;
        logic RESP_STATUS;
        logic RESP_ADDR0;
        logic RESP_ADDR1;
        logic RESP_ADDR2;
        logic RESP_ADDR3;
        logic RESP_DATA0;
        logic RESP_DATA1;
        logic RESP_DATA2;
        logic RESP_DATA3;
        logic STATUS;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [7:0] decoded_wr_data;

    always_comb begin
        decoded_reg_strb.REQ_CMD = cpuif_req_masked & (cpuif_addr == 'h400);
        decoded_reg_strb.REQ_TAG = cpuif_req_masked & (cpuif_addr == 'h401);
        decoded_reg_strb.REQ_BEN = cpuif_req_masked & (cpuif_addr == 'h402);
        decoded_reg_strb.REQ_ADDR0 = cpuif_req_masked & (cpuif_addr == 'h404);
        decoded_reg_strb.REQ_ADDR1 = cpuif_req_masked & (cpuif_addr == 'h405);
        decoded_reg_strb.REQ_ADDR2 = cpuif_req_masked & (cpuif_addr == 'h406);
        decoded_reg_strb.REQ_ADDR3 = cpuif_req_masked & (cpuif_addr == 'h407);
        decoded_reg_strb.REQ_DATA0 = cpuif_req_masked & (cpuif_addr == 'h408);
        decoded_reg_strb.REQ_DATA1 = cpuif_req_masked & (cpuif_addr == 'h409);
        decoded_reg_strb.REQ_DATA2 = cpuif_req_masked & (cpuif_addr == 'h40a);
        decoded_reg_strb.REQ_DATA3 = cpuif_req_masked & (cpuif_addr == 'h40b);
        decoded_reg_strb.RESP_CMD = cpuif_req_masked & (cpuif_addr == 'h40c);
        decoded_reg_strb.RESP_TAG = cpuif_req_masked & (cpuif_addr == 'h40d);
        decoded_reg_strb.RESP_BEN = cpuif_req_masked & (cpuif_addr == 'h40e);
        decoded_reg_strb.RESP_STATUS = cpuif_req_masked & (cpuif_addr == 'h40f);
        decoded_reg_strb.RESP_ADDR0 = cpuif_req_masked & (cpuif_addr == 'h410);
        decoded_reg_strb.RESP_ADDR1 = cpuif_req_masked & (cpuif_addr == 'h411);
        decoded_reg_strb.RESP_ADDR2 = cpuif_req_masked & (cpuif_addr == 'h412);
        decoded_reg_strb.RESP_ADDR3 = cpuif_req_masked & (cpuif_addr == 'h413);
        decoded_reg_strb.RESP_DATA0 = cpuif_req_masked & (cpuif_addr == 'h414);
        decoded_reg_strb.RESP_DATA1 = cpuif_req_masked & (cpuif_addr == 'h415);
        decoded_reg_strb.RESP_DATA2 = cpuif_req_masked & (cpuif_addr == 'h416);
        decoded_reg_strb.RESP_DATA3 = cpuif_req_masked & (cpuif_addr == 'h417);
        decoded_reg_strb.STATUS = cpuif_req_masked & (cpuif_addr == 'h418);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;

    // Writes are always granted with no error response
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } cmd;
        } REQ_CMD;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } tag;
        } REQ_TAG;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } ben;
        } REQ_BEN;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } addr;
        } REQ_ADDR0;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } addr;
        } REQ_ADDR1;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } addr;
        } REQ_ADDR2;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } addr;
        } REQ_ADDR3;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } data;
        } REQ_DATA0;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } data;
        } REQ_DATA1;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } data;
        } REQ_DATA2;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } data;
        } REQ_DATA3;
        struct {
            struct {
                logic next;
                logic load_next;
            } response_read;
            struct {
                logic next;
                logic load_next;
            } request_write;
        } STATUS;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [7:0] value;
            } cmd;
        } REQ_CMD;
        struct {
            struct {
                logic [7:0] value;
            } tag;
        } REQ_TAG;
        struct {
            struct {
                logic [3:0] value;
            } ben;
        } REQ_BEN;
        struct {
            struct {
                logic [7:0] value;
            } addr;
        } REQ_ADDR0;
        struct {
            struct {
                logic [7:0] value;
            } addr;
        } REQ_ADDR1;
        struct {
            struct {
                logic [7:0] value;
            } addr;
        } REQ_ADDR2;
        struct {
            struct {
                logic [7:0] value;
            } addr;
        } REQ_ADDR3;
        struct {
            struct {
                logic [7:0] value;
            } data;
        } REQ_DATA0;
        struct {
            struct {
                logic [7:0] value;
            } data;
        } REQ_DATA1;
        struct {
            struct {
                logic [7:0] value;
            } data;
        } REQ_DATA2;
        struct {
            struct {
                logic [7:0] value;
            } data;
        } REQ_DATA3;
        struct {
            struct {
                logic value;
            } response_read;
            struct {
                logic value;
            } request_write;
        } STATUS;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: ltpi_data_channel_controller_csr_rdl.REQ_CMD.cmd
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_CMD.cmd.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_CMD && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_CMD.cmd.next = next_c;
        field_combo.REQ_CMD.cmd.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_CMD.cmd.value <= 'h0;
        end else if(field_combo.REQ_CMD.cmd.load_next) begin
            field_storage.REQ_CMD.cmd.value <= field_combo.REQ_CMD.cmd.next;
        end
    end
    assign hwif_out.REQ_CMD.cmd.value = field_storage.REQ_CMD.cmd.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_TAG.tag
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_TAG.tag.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_TAG && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_TAG.tag.next = next_c;
        field_combo.REQ_TAG.tag.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_TAG.tag.value <= 'h0;
        end else if(field_combo.REQ_TAG.tag.load_next) begin
            field_storage.REQ_TAG.tag.value <= field_combo.REQ_TAG.tag.next;
        end
    end
    assign hwif_out.REQ_TAG.tag.value = field_storage.REQ_TAG.tag.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_BEN.ben
    always_comb begin
        automatic logic [3:0] next_c = field_storage.REQ_BEN.ben.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_BEN && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[3:0];
            load_next_c = '1;
        end
        field_combo.REQ_BEN.ben.next = next_c;
        field_combo.REQ_BEN.ben.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_BEN.ben.value <= 'h0;
        end else if(field_combo.REQ_BEN.ben.load_next) begin
            field_storage.REQ_BEN.ben.value <= field_combo.REQ_BEN.ben.next;
        end
    end
    assign hwif_out.REQ_BEN.ben.value = field_storage.REQ_BEN.ben.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_ADDR0.addr
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_ADDR0.addr.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_ADDR0 && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_ADDR0.addr.next = next_c;
        field_combo.REQ_ADDR0.addr.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_ADDR0.addr.value <= 'h0;
        end else if(field_combo.REQ_ADDR0.addr.load_next) begin
            field_storage.REQ_ADDR0.addr.value <= field_combo.REQ_ADDR0.addr.next;
        end
    end
    assign hwif_out.REQ_ADDR0.addr.value = field_storage.REQ_ADDR0.addr.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_ADDR1.addr
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_ADDR1.addr.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_ADDR1 && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_ADDR1.addr.next = next_c;
        field_combo.REQ_ADDR1.addr.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_ADDR1.addr.value <= 'h0;
        end else if(field_combo.REQ_ADDR1.addr.load_next) begin
            field_storage.REQ_ADDR1.addr.value <= field_combo.REQ_ADDR1.addr.next;
        end
    end
    assign hwif_out.REQ_ADDR1.addr.value = field_storage.REQ_ADDR1.addr.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_ADDR2.addr
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_ADDR2.addr.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_ADDR2 && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_ADDR2.addr.next = next_c;
        field_combo.REQ_ADDR2.addr.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_ADDR2.addr.value <= 'h0;
        end else if(field_combo.REQ_ADDR2.addr.load_next) begin
            field_storage.REQ_ADDR2.addr.value <= field_combo.REQ_ADDR2.addr.next;
        end
    end
    assign hwif_out.REQ_ADDR2.addr.value = field_storage.REQ_ADDR2.addr.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_ADDR3.addr
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_ADDR3.addr.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_ADDR3 && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_ADDR3.addr.next = next_c;
        field_combo.REQ_ADDR3.addr.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_ADDR3.addr.value <= 'h0;
        end else if(field_combo.REQ_ADDR3.addr.load_next) begin
            field_storage.REQ_ADDR3.addr.value <= field_combo.REQ_ADDR3.addr.next;
        end
    end
    assign hwif_out.REQ_ADDR3.addr.value = field_storage.REQ_ADDR3.addr.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_DATA0.data
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_DATA0.data.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_DATA0 && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_DATA0.data.next = next_c;
        field_combo.REQ_DATA0.data.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_DATA0.data.value <= 'h0;
        end else if(field_combo.REQ_DATA0.data.load_next) begin
            field_storage.REQ_DATA0.data.value <= field_combo.REQ_DATA0.data.next;
        end
    end
    assign hwif_out.REQ_DATA0.data.value = field_storage.REQ_DATA0.data.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_DATA1.data
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_DATA1.data.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_DATA1 && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_DATA1.data.next = next_c;
        field_combo.REQ_DATA1.data.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_DATA1.data.value <= 'h0;
        end else if(field_combo.REQ_DATA1.data.load_next) begin
            field_storage.REQ_DATA1.data.value <= field_combo.REQ_DATA1.data.next;
        end
    end
    assign hwif_out.REQ_DATA1.data.value = field_storage.REQ_DATA1.data.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_DATA2.data
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_DATA2.data.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_DATA2 && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_DATA2.data.next = next_c;
        field_combo.REQ_DATA2.data.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_DATA2.data.value <= 'h0;
        end else if(field_combo.REQ_DATA2.data.load_next) begin
            field_storage.REQ_DATA2.data.value <= field_combo.REQ_DATA2.data.next;
        end
    end
    assign hwif_out.REQ_DATA2.data.value = field_storage.REQ_DATA2.data.value;
    // Field: ltpi_data_channel_controller_csr_rdl.REQ_DATA3.data
    always_comb begin
        automatic logic [7:0] next_c = field_storage.REQ_DATA3.data.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.REQ_DATA3 && decoded_req_is_wr) begin // SW write
            next_c = decoded_wr_data[7:0];
            load_next_c = '1;
        end
        field_combo.REQ_DATA3.data.next = next_c;
        field_combo.REQ_DATA3.data.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.REQ_DATA3.data.value <= 'h0;
        end else if(field_combo.REQ_DATA3.data.load_next) begin
            field_storage.REQ_DATA3.data.value <= field_combo.REQ_DATA3.data.next;
        end
    end
    assign hwif_out.REQ_DATA3.data.value = field_storage.REQ_DATA3.data.value;
    // Field: ltpi_data_channel_controller_csr_rdl.STATUS.response_read
    always_comb begin
        automatic logic [0:0] next_c = field_storage.STATUS.response_read.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.STATUS && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.STATUS.response_read.value | decoded_wr_data[1:1];
            load_next_c = '1;
        end else if(hwif_in.STATUS.response_read.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.STATUS.response_read.next = next_c;
        field_combo.STATUS.response_read.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.STATUS.response_read.value <= 'h0;
        end else if(field_combo.STATUS.response_read.load_next) begin
            field_storage.STATUS.response_read.value <= field_combo.STATUS.response_read.next;
        end
    end
    assign hwif_out.STATUS.response_read.value = field_storage.STATUS.response_read.value;
    // Field: ltpi_data_channel_controller_csr_rdl.STATUS.request_write
    always_comb begin
        automatic logic [0:0] next_c = field_storage.STATUS.request_write.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.STATUS && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.STATUS.request_write.value | decoded_wr_data[3:3];
            load_next_c = '1;
        end else if(hwif_in.STATUS.request_write.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.STATUS.request_write.next = next_c;
        field_combo.STATUS.request_write.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.STATUS.request_write.value <= 'h0;
        end else if(field_combo.STATUS.request_write.load_next) begin
            field_storage.STATUS.request_write.value <= field_combo.STATUS.request_write.next;
        end
    end
    assign hwif_out.STATUS.request_write.value = field_storage.STATUS.request_write.value;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_err;
    logic readback_done;
    logic [7:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [7:0] readback_array[24];
    assign readback_array[0][7:0] = (decoded_reg_strb.REQ_CMD && !decoded_req_is_wr) ? field_storage.REQ_CMD.cmd.value : '0;
    assign readback_array[1][7:0] = (decoded_reg_strb.REQ_TAG && !decoded_req_is_wr) ? field_storage.REQ_TAG.tag.value : '0;
    assign readback_array[2][3:0] = (decoded_reg_strb.REQ_BEN && !decoded_req_is_wr) ? field_storage.REQ_BEN.ben.value : '0;
    assign readback_array[2][7:4] = '0;
    assign readback_array[3][7:0] = (decoded_reg_strb.REQ_ADDR0 && !decoded_req_is_wr) ? field_storage.REQ_ADDR0.addr.value : '0;
    assign readback_array[4][7:0] = (decoded_reg_strb.REQ_ADDR1 && !decoded_req_is_wr) ? field_storage.REQ_ADDR1.addr.value : '0;
    assign readback_array[5][7:0] = (decoded_reg_strb.REQ_ADDR2 && !decoded_req_is_wr) ? field_storage.REQ_ADDR2.addr.value : '0;
    assign readback_array[6][7:0] = (decoded_reg_strb.REQ_ADDR3 && !decoded_req_is_wr) ? field_storage.REQ_ADDR3.addr.value : '0;
    assign readback_array[7][7:0] = (decoded_reg_strb.REQ_DATA0 && !decoded_req_is_wr) ? field_storage.REQ_DATA0.data.value : '0;
    assign readback_array[8][7:0] = (decoded_reg_strb.REQ_DATA1 && !decoded_req_is_wr) ? field_storage.REQ_DATA1.data.value : '0;
    assign readback_array[9][7:0] = (decoded_reg_strb.REQ_DATA2 && !decoded_req_is_wr) ? field_storage.REQ_DATA2.data.value : '0;
    assign readback_array[10][7:0] = (decoded_reg_strb.REQ_DATA3 && !decoded_req_is_wr) ? field_storage.REQ_DATA3.data.value : '0;
    assign readback_array[11][7:0] = (decoded_reg_strb.RESP_CMD && !decoded_req_is_wr) ? hwif_in.RESP_CMD.cmd.next : '0;
    assign readback_array[12][7:0] = (decoded_reg_strb.RESP_TAG && !decoded_req_is_wr) ? hwif_in.RESP_TAG.tag.next : '0;
    assign readback_array[13][3:0] = (decoded_reg_strb.RESP_BEN && !decoded_req_is_wr) ? hwif_in.RESP_BEN.ben.next : '0;
    assign readback_array[13][7:4] = '0;
    assign readback_array[14][3:0] = (decoded_reg_strb.RESP_STATUS && !decoded_req_is_wr) ? hwif_in.RESP_STATUS.status.next : '0;
    assign readback_array[14][7:4] = '0;
    assign readback_array[15][7:0] = (decoded_reg_strb.RESP_ADDR0 && !decoded_req_is_wr) ? hwif_in.RESP_ADDR0.addr.next : '0;
    assign readback_array[16][7:0] = (decoded_reg_strb.RESP_ADDR1 && !decoded_req_is_wr) ? hwif_in.RESP_ADDR1.addr.next : '0;
    assign readback_array[17][7:0] = (decoded_reg_strb.RESP_ADDR2 && !decoded_req_is_wr) ? hwif_in.RESP_ADDR2.addr.next : '0;
    assign readback_array[18][7:0] = (decoded_reg_strb.RESP_ADDR3 && !decoded_req_is_wr) ? hwif_in.RESP_ADDR3.addr.next : '0;
    assign readback_array[19][7:0] = (decoded_reg_strb.RESP_DATA0 && !decoded_req_is_wr) ? hwif_in.RESP_DATA0.data.next : '0;
    assign readback_array[20][7:0] = (decoded_reg_strb.RESP_DATA1 && !decoded_req_is_wr) ? hwif_in.RESP_DATA1.data.next : '0;
    assign readback_array[21][7:0] = (decoded_reg_strb.RESP_DATA2 && !decoded_req_is_wr) ? hwif_in.RESP_DATA2.data.next : '0;
    assign readback_array[22][7:0] = (decoded_reg_strb.RESP_DATA3 && !decoded_req_is_wr) ? hwif_in.RESP_DATA3.data.next : '0;
    assign readback_array[23][0:0] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.response_ready.next : '0;
    assign readback_array[23][1:1] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? field_storage.STATUS.response_read.value : '0;
    assign readback_array[23][2:2] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? hwif_in.STATUS.request_ready.next : '0;
    assign readback_array[23][3:3] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? field_storage.STATUS.request_write.value : '0;
    assign readback_array[23][7:4] = '0;


    // Reduce the array
    always_comb begin
        automatic logic [7:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<24; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end


    always_ff @(posedge clk) begin
        if(rst) begin
            cpuif_rd_ack <= '0;
            cpuif_rd_data <= '0;
            cpuif_rd_err <= '0;
        end else begin
            cpuif_rd_ack <= readback_done;
            cpuif_rd_data <= readback_data;
            cpuif_rd_err <= readback_err;
        end
    end


endmodule